---
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install dependencies
  apt:
    name:
      - software-properties-common
      - dirmngr
      - wget
    state: present

- name: Install pexpect
  pip:
    name: pexpect
    state: present

- name: Download MySQL APT repository package
  uri:
    url: https://repo.mysql.com/mysql-apt-config_0.8.25-1_all.deb
    method: GET
    return_content: yes
    headers:
      User-Agent: "Wget/1.21.1 (linux-gnu)"
  register: download_result
  retries: 3
  delay: 5
  until: download_result.status == 200

- name: Save the downloaded content to a file
  copy:
    content: "{{ download_result.content }}"
    dest: /tmp/mysql-apt-config.deb

- name: Install MySQL APT repository package
  apt:
    deb: /tmp/mysql-apt-config.deb
  register: apt_result
  retries: 3
  delay: 5
  until: apt_result is success

- name: Configure MySQL APT repository
  expect:
    command: /usr/bin/dpkg-reconfigure mysql-apt-config
    responses:
      'Which MySQL product do you wish to configure\?': ''
      'Which server version do you wish to receive\?': 'mysql-8.0'
      'Apply the changes made above\?': 'Ok'
    timeout: 300

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install MySQL server
  apt:
    name: mysql-server
    state: present
  environment:
    DEBIAN_FRONTEND: noninteractive
  register: mysql_install
  retries: 3
  delay: 5
  until: mysql_install is success

- name: Ensure MySQL is started and enabled
  systemd:
    name: mysql
    state: started
    enabled: yes

- name: Check MySQL version
  command: mysql --version
  register: mysql_version
  changed_when: false

- name: Display MySQL version
  debug:
    var: mysql_version.stdout

- name: Generate MySQL root password
  set_fact:
    mysql_root_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"

- name: Create mysql_secure_installation expect script
  copy:
    content: |
      #!/usr/bin/expect -f
      set timeout -1
      spawn mysql_secure_installation
      expect "Enter password for user root:"
      send "{{ mysql_root_password }}\r"
      expect "Press y|Y for Yes, any other key for No:"
      send "Y\r"
      expect "Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:"
      send "2\r"
      expect "Change the password for root ? ((Press y|Y for Yes, any other key for No) :"
      send "n\r"
      expect "Remove anonymous users? (Press y|Y for Yes, any other key for No) :"
      send "Y\r"
      expect "Disallow root login remotely? (Press y|Y for Yes, any other key for No) :"
      send "Y\r"
      expect "Remove test database and access to it? (Press y|Y for Yes, any other key for No) :"
      send "Y\r"
      expect "Reload privilege tables now? (Press y|Y for Yes, any other key for No) :"
      send "Y\r"
      expect eof
    dest: /tmp/mysql_secure_installation.exp
    mode: '0700'

- name: Run mysql_secure_installation
  command: /tmp/mysql_secure_installation.exp
  register: secure_mysql

- name: Remove mysql_secure_installation expect script
  file:
    path: /tmp/mysql_secure_installation.exp
    state: absent

- name: Check MySQL version
  command: mysql -V
  register: mysql_version
  changed_when: false

- name: Display MySQL version
  debug:
    var: mysql_version.stdout

- name: Save MySQL root password
  copy:
    content: "MySQL Root Password: {{ mysql_root_password }}"
    dest: /root/magento_credentials/mysql_root_password.txt
    mode: '0600'

- name: Create Magento database
  mysql_db:
    name: magento
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Generate Magento database password
  set_fact:
    magento_db_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"

- name: Create Magento database user
  mysql_user:
    name: magento
    password: "{{ magento_db_password }}"
    priv: 'magento.*:ALL'
    host: localhost
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Save Magento database credentials
  copy:
    content: |
      Magento Database Name: magento
      Magento Database User: magento
      Magento Database Password: {{ magento_db_password }}
    dest: /root/magento_credentials/magento_db_credentials.txt
    mode: '0600'
